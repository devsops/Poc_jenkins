buildscript {
    repositories {
        //Required repos
        jcenter {
            url "http://jcenter.bintray.com/"
        }
        mavenCentral()
        maven {
            url "http://dl.bintray.com/vigidroid/maven"
        }
        maven {
            url 'https://maven.google.com/'
            name 'Google'
        }

        maven {
            url "https://plugins.gradle.org/m2/"
        }

    }
    dependencies {
        //Required dependency for spring-boot plugin
        classpath 'org.springframework.boot:spring-boot-gradle-plugin:1.5.10.RELEASE'

    }
}

apply plugin: 'java'
apply plugin: 'org.springframework.boot'
apply from: "${rootDir}/include/gradle-plugins/artifactory-jar-publish.gradle"
apply from: "${rootDir}/include/codecoverage/java_code_coverage.gradle"

group = 'com.bosch.pai.retail.core.server.analytics'

bootRepackage {
    enabled = false
}

dependencies {
    compile 'org.springframework.boot:spring-boot-starter-web:1.5.10.RELEASE'
    compile ('com.google.code.gson:gson:2.8.0')
    compile ('net.sf.proguard:proguard-gradle:5.3.3')
    compile project(':libraries:java:dbmodel')
    compile project(':libraries:java:analyticsmodel')
    compile project(':libraries:java:encodermodel')
    compile project(':libraries:java:configmodel')
    implementation 'org.springframework:spring-test:4.3.10.RELEASE'
    testCompile group: 'junit', name: 'junit', version:'4.12'
    testCompile group: 'org.mockito', name: 'mockito-core', version:'1.10.19'
    testCompile group: 'org.mockito', name: 'mockito-all', version: '1.10.19'
    testCompile group: "de.flapdoodle.embed", name: "de.flapdoodle.embed.mongo", version: "2.2.0"

//    testCompile "org.powermock:powermock-module-junit4:1.6.3"
//    testCompile "org.powermock:powermock-module-junit4-rule:1.6.2"
//    testCompile "org.powermock:powermock-api-mockito:1.6.3"
//    testCompile "org.powermock:powermock-classloading-xstream:1.6.2"
}

springBoot {
    customConfiguration ='runtime'
}
configurations {
    runtime.exclude group: "net.sf.proguard"
}

task proguard(type: proguard.gradle.ProGuardTask) {
    configuration 'proguard.txt'
    libraryjars configurations.compile.findAll() { it.name.startsWith("gson") }
    libraryjars configurations.compile.findAll() { it.name.startsWith("spring") }
    libraryjars configurations.compile.findAll() { it.name.startsWith("mongo") }
    libraryjars configurations.compile.findAll() { it.name.startsWith("slf4j") }
    libraryjars configurations.compile.findAll() { it.name.startsWith("jackson") }
    libraryjars configurations.compile.findAll() { it.absolutePath.contains("commonrm") }
    libraryjars configurations.compile.findAll() { it.absolutePath.contains("dbmodel") }
    libraryjars configurations.compile.findAll() { it.absolutePath.contains("analyticsmodel") }
    libraryjars configurations.compile.findAll() { it.absolutePath.contains("encodermodel") }
    libraryjars configurations.compile.findAll() { it.absolutePath.contains("configmodel") }
    injars 'build/libs/Analytics-'+"${version}"+'.jar'
    outjars 'build/libs/proguard-Analytics.jar'
}

task extractArtifact(dependsOn: proguard) {
    doLast {

        def outputDirName = "${buildDir}/tmp/proguard"
        def outputDir = file(outputDirName)
        assert outputDir.deleteDir()  // cleanup workspace

        def zipFile = file("${buildDir}/libs/proguard-Analytics.jar")

        copy {
            from zipTree(zipFile)
            into outputDir
        }

        assert zipFile.delete()
    }
}

task proguardJar(type: Jar, dependsOn: extractArtifact) {
    def inputDirName = "${buildDir}/tmp/proguard"
    from file("${inputDirName}")
    file("${inputDirName}").deleteOnExit()
}

task repackProguardJar(type: BootRepackage, dependsOn: proguardJar ) {
    withJarTask = proguardJar

}

build.finalizedBy(repackProguardJar)